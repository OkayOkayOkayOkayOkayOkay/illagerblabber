
plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.1.20"
}
import java.util.Properties

// Load versions
def mcVersionsFile = file("gradle/mcversions.properties")
def mcVersionProps = new Properties()
mcVersionsFile.withInputStream { mcVersionProps.load(it) }

// Get target version (default to current if not specified)
def targetMcVersion = project.findProperty("mcVersion") ?: "1.21.1"
def versionData = mcVersionProps.getProperty("version.$targetMcVersion")?.split(",")
if (versionData == null) {
	throw new GradleException("Unknown Minecraft version: $targetMcVersion")
}

// Parse version data
def mcVersion = versionData[0]
def yarnVersion = versionData[1]
def loaderVersion = versionData[2]
def fabricVersion = versionData[3]
def kotlinVersion = versionData[4]

loom {
	runs {
		client {
			// This is the correct syntax for newer Loom
			vmArgs("-Djdk.attach.allowAttachSelf=true")
		}
	}
}

// Update project properties
ext {
	minecraft_version = mcVersion
	yarn_mappings = yarnVersion
	loader_version = loaderVersion
	fabric_version = fabricVersion
	fabric_kotlin_version = kotlinVersion
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "${archives_base_name}-mc${mcVersion}"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "net.minecraft:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	toolchain {
		languageVersion = JavaLanguageVersion.of(Integer.parseInt(targetCompatibility.getMajorVersion()))
	}
}


jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}


// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}